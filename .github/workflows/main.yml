# Name of the workflow as it will appear in the GitHub Actions tab
name: CI/CD Pipeline

# Define the events that will trigger this workflow.
# This workflow will run whenever there's a push to the 'main' branch.
on:
  push:
    branches:
      - main

# A workflow is composed of one or more jobs.
jobs:
  # Define a job named 'test'.
  # This job will run the Node.js application tests.
  test:
    # Specify the type of runner the job will run on.
    runs-on: ubuntu-latest

    # The steps a job should perform.
    steps:
      # Step 1: Checkout the repository code.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Node.js environment.
      # This action installs the specified version of Node.js.
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Use Node.js version 18

      # Step 3: Install Node.js dependencies.
      # 'npm ci' is used for clean, reproducible installations based on package-lock.json.
      - name: Install dependencies
        run: npm ci

      # Step 4: Run tests.
      # This command executes the test script defined in package.json.
      - name: Run tests
        run: npm test

  # Define a job named 'build_and_push'.
  # This job will build our Docker image and push it to Docker Hub.
  # It will only run if the 'test' job completes successfully.
  build_and_push:
    # This job depends on the 'test' job.
    # It will only start if the 'test' job passes.
    needs: test
    # Specify the type of runner the job will run on.
    runs-on: ubuntu-latest

    # The steps a job should perform.
    steps:
      # Step 1: Check out the repository code.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Log in to Docker Hub.
      # This step uses the 'docker/login-action@v3' action to authenticate with Docker Hub.
      # DOCKERHUB_USERNAME and DOCKERHUB_TOKEN must be configured as GitHub Secrets.
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 3: Build and push the Docker image.
      # This step uses the 'docker/build-push-action@v5' action to build the image from our Dockerfile
      # and push it to the specified Docker Hub repository.
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          # Enable pushing the image to Docker Hub.
          push: true
          # Set the image tags.
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/nodejs-ci-cd-demo:${{ github.sha }},${{ secrets.DOCKERHUB_USERNAME }}/nodejs-ci-cd-demo:latest
